#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from com.evidence.techops.cass import CassOpsAgent
from com.evidence.techops.cass.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string getStatus()'
  print '  string getColumnFamilyMetric(string keySpace, string colFamily)'
  print '  string incrementalBackup(string keySpace)'
  print '  string incrementalBackup2(string keySpace)'
  print '  string snapshotBackup(string keySpace)'
  print '  string snapshotBackup2(string keySpace)'
  print '  string commitLogBackup()'
  print '  string commitLogBackup2()'
  print '  void restoreBackup(string keySpace, string snapShotName, string hostId)'
  print '  string csvToSsTableConv(string csvFilePath, string keySpace, string colFamily, string partitioner)'
  print '  bool ssTableImport(string ssTableFilePath, string keySpace, string colFamily)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = CassOpsAgent.Client(protocol)
transport.open()

if cmd == 'getStatus':
  if len(args) != 0:
    print 'getStatus requires 0 args'
    sys.exit(1)
  pp.pprint(client.getStatus())

elif cmd == 'getColumnFamilyMetric':
  if len(args) != 2:
    print 'getColumnFamilyMetric requires 2 args'
    sys.exit(1)
  pp.pprint(client.getColumnFamilyMetric(args[0],args[1],))

elif cmd == 'incrementalBackup':
  if len(args) != 1:
    print 'incrementalBackup requires 1 args'
    sys.exit(1)
  pp.pprint(client.incrementalBackup(args[0],))

elif cmd == 'incrementalBackup2':
  if len(args) != 1:
    print 'incrementalBackup2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.incrementalBackup2(args[0],))

elif cmd == 'snapshotBackup':
  if len(args) != 1:
    print 'snapshotBackup requires 1 args'
    sys.exit(1)
  pp.pprint(client.snapshotBackup(args[0],))

elif cmd == 'snapshotBackup2':
  if len(args) != 1:
    print 'snapshotBackup2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.snapshotBackup2(args[0],))

elif cmd == 'commitLogBackup':
  if len(args) != 0:
    print 'commitLogBackup requires 0 args'
    sys.exit(1)
  pp.pprint(client.commitLogBackup())

elif cmd == 'commitLogBackup2':
  if len(args) != 0:
    print 'commitLogBackup2 requires 0 args'
    sys.exit(1)
  pp.pprint(client.commitLogBackup2())

elif cmd == 'restoreBackup':
  if len(args) != 3:
    print 'restoreBackup requires 3 args'
    sys.exit(1)
  pp.pprint(client.restoreBackup(args[0],args[1],args[2],))

elif cmd == 'csvToSsTableConv':
  if len(args) != 4:
    print 'csvToSsTableConv requires 4 args'
    sys.exit(1)
  pp.pprint(client.csvToSsTableConv(args[0],args[1],args[2],args[3],))

elif cmd == 'ssTableImport':
  if len(args) != 3:
    print 'ssTableImport requires 3 args'
    sys.exit(1)
  pp.pprint(client.ssTableImport(args[0],args[1],args[2],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
