/**
 * Generated by Scrooge
 *   version: 3.16.3
 *   rev: b8593c83072d94fc44feaa8d97940b9266d84ed0
 *   built at: 20140806-054445
 */
package com.evidence.techops.cass

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object BackupRestoreException extends ThriftStructCodec3[BackupRestoreException] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("BackupRestoreException")
  val CodeField = new TField("code", TType.I64, 1)
  val CodeFieldManifest = implicitly[Manifest[Long]]
  val MessageField = new TField("message", TType.STRING, 2)
  val MessageFieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      CodeField,
      true,
      CodeFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      MessageField,
      true,
      MessageFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: BackupRestoreException) {
  }

  override def encode(_item: BackupRestoreException, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): BackupRestoreException = {
    var code: Option[Long] = None
    var message: Option[String] = None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I64 => {
                code = Some(readCodeValue(_iprot))
              }
              case _actualType =>
                val _expectedType = TType.I64
            
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING => {
                message = Some(readMessageValue(_iprot))
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'message' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new BackupRestoreException(
      code,
      message,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    code: Option[Long] = None,
    message: Option[String] = None
  ): BackupRestoreException =
    new BackupRestoreException(
      code,
      message
    )

  def unapply(_item: BackupRestoreException): Option[scala.Product2[Option[Long], Option[String]]] = Some(_item)


  private def readCodeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  private def writeCodeField(code_item: Long, _oprot: TProtocol) {
    _oprot.writeFieldBegin(CodeField)
    writeCodeValue(code_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeCodeValue(code_item: Long, _oprot: TProtocol) {
    _oprot.writeI64(code_item)
  }

  private def readMessageValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeMessageField(message_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(MessageField)
    writeMessageValue(message_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeMessageValue(message_item: String, _oprot: TProtocol) {
    _oprot.writeString(message_item)
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

}

class BackupRestoreException(
    val code: Option[Long],
    val message: Option[String],
    val _passthroughFields: immutable$Map[Short, TFieldBlob])
  extends ThriftException with com.twitter.finagle.SourcedException with ThriftStruct
  with scala.Product2[Option[Long], Option[String]]
  with java.io.Serializable
{
  import BackupRestoreException._
    def this(
      code: Option[Long] = None,
      message: Option[String] = None
    ) = this(
      code,
      message,
      Map.empty
    )

  def _1 = code
  def _2 = message

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (code.isDefined) {
              writeCodeValue(code.get, _oprot)
              Some(BackupRestoreException.CodeField)
            } else {
              None
            }
          case 2 =>
            if (message.isDefined) {
              writeMessageValue(message.get, _oprot)
              Some(BackupRestoreException.MessageField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): BackupRestoreException = {
    var code: Option[Long] = this.code
    var message: Option[String] = this.message
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        code = Some(readCodeValue(_blob.read))
      case 2 =>
        message = Some(readMessageValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new BackupRestoreException(
      code,
      message,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): BackupRestoreException = {
    var code: Option[Long] = this.code
    var message: Option[String] = this.message

    _fieldId match {
      case 1 =>
        code = None
      case 2 =>
        message = None
      case _ =>
    }
    new BackupRestoreException(
      code,
      message,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetCode: BackupRestoreException = unsetField(1)

  def unsetMessage: BackupRestoreException = unsetField(2)


  override def write(_oprot: TProtocol) {
    BackupRestoreException.validate(this)
    _oprot.writeStructBegin(Struct)
    if (code.isDefined) writeCodeField(code.get, _oprot)
    if (message.isDefined) writeMessageField(message.get, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    code: Option[Long] = this.code,
    message: Option[String] = this.message,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): BackupRestoreException =
    new BackupRestoreException(
      code,
      message,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[BackupRestoreException]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[BackupRestoreException]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)

  override def getMessage: String = String.valueOf(message)

  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => this.code
    case 1 => this.message
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "BackupRestoreException"
}